<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Student Report Collection Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grade API">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Grade">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.path">/schools/reports/grades</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;school_id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;school_name&quot;: &quot;BCIT&quot;,&#xd;
  &quot;reporting_date&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
  &quot;reports&quot;: [&#xd;
    {&#xd;
      &quot;student_id&quot;: &quot;A${__RandomString(8,1234567890)}&quot;,&#xd;
      &quot;student_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;course&quot;: &quot;ACIT3855 Service Based Architecture&quot;,&#xd;
      &quot;assignment&quot;: &quot;${__RandomFromMultipleVars(lab1|lab2|lab3|final|midterm)}&quot;,&#xd;
      &quot;score&quot;: ${__Random(50,100)},&#xd;
      &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ)}&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;student_id&quot;: &quot;A${__RandomString(8,1234567890)}&quot;,&#xd;
      &quot;student_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;course&quot;: &quot;ACIT3855 Service Based Architecture&quot;,&#xd;
      &quot;assignment&quot;: &quot;${__RandomFromMultipleVars(lab1|lab2|lab3|final|midterm)}&quot;,&#xd;
      &quot;score&quot;: ${__Random(50,100)},&#xd;
      &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ)}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Activity">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.path">/schools/reports/activities</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;school_id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;school_name&quot;: &quot;${__RandomString(4,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}&quot;,&#xd;
  &quot;reporting_date&quot;: &quot;${__RandomDate(,,2050-07-08,,)}&quot;,&#xd;
  &quot;reports&quot;: [&#xd;
    {&#xd;
      &quot;student_id&quot;: &quot;A${__RandomString(8,1234567890)}&quot;,&#xd;
      &quot;student_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;activity_type&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(12,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;activity_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;hours&quot;: ${__Random(0,10)},&#xd;
      &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ)}&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;student_id&quot;: &quot;A${__RandomString(8,1234567890)}&quot;,&#xd;
      &quot;student_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;activity_type&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(12,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;activity_name&quot;: &quot;${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)} ${__RandomString(1,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
      &quot;hours&quot;: ${__Random(0,10)},&#xd;
      &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ)}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable">
          <stringProp name="maximumValue">01999999</stringProp>
          <stringProp name="minimumValue">01000000</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed">01005555</stringProp>
          <stringProp name="variableName">student_id</stringProp>
        </RandomVariableConfig>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="lab1" elementType="Argument">
            <stringProp name="Argument.name">lab1</stringProp>
            <stringProp name="Argument.value">lab1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lab2" elementType="Argument">
            <stringProp name="Argument.name">lab2</stringProp>
            <stringProp name="Argument.value">lab2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lab3" elementType="Argument">
            <stringProp name="Argument.name">lab3</stringProp>
            <stringProp name="Argument.value">lab3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="final" elementType="Argument">
            <stringProp name="Argument.name">final</stringProp>
            <stringProp name="Argument.value">final</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="midterm" elementType="Argument">
            <stringProp name="Argument.name">midterm</stringProp>
            <stringProp name="Argument.value">midterm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
